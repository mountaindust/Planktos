1.1.0
-----------------------
Dynamic loading of 2D and 3D fluid velocity data!
This allows simulations with a highly resolved fluid where RAM constraints
are a major issue.
- New FluidData class with subclasses for different data sources
- ALL fluid data is now a FluidData instance


1.0.0
-----------------------
Moving immersed boundaries are now supported in 2D!
- IB2d import of dynamic boundary meshes
- all 2D plotting routines updated to handle moving immersed boundaries
- both sticky and frictionless immersed boundary interactions included!
- reworked _apply_internal_static_BC for 2D and 3D cases, important bug fixes
- TODO: include/test sticking particles (maybe they don't move with bndry?)
- Swarm and Environment classes are now capitalized.
- Cleans up Swarm and Environment by kicking static methods and loaders to external module. Adds leading underscores to make API cleaner.
- Changes the name of get_positions to apply_agent_model, removes params argument.
- Updated installation instructions and added workflow.


Geometry module added to collect workhorse mathematical functions. Explanation of the mathematics and implementation has been added and cleaned up.

Better code organization, including consolidation of IB2d mesh loading

Critical bug fixes in agent-mesh interaction; extensive testing.


0.7.0
-----------------------
Coloring for individual agents
Agents can now be individually colored by setting a property. They can also be named. This is documented in the Swarm constructor.

Plotting of agent headings
The direction individual agents are facing/moving can now be plotted in 2D. This is turned on by default. The heading is drawn from the agent's current velocity unless individual heading angles are a specified as an agent property.

Property history
Agent property history can now be optionally saved. This is necessary for plotting agents that change color over time (e.g., highlighting certain agents that fulfill a given condition) and other situations.

New method after_move
This method is called after agents finish moving. It can used to act on their final positions and velocities which was formerly not possible because interactions with immersed boundaries would come after the user defined behavior.

Euler_brownian_motion is now robust to arbitrary starting positions/velocities, not just the current state of all agents together.

define_pic_grid
This new method of the Environment class implements a particle-in-cell method for agents interacting with neighbors. It can be utilized to make user-defined behavior more efficient.

ex_poisson_search.py
New example demonstrating how to handle arbitrary switching times in Planktos and demonstrating a basic intermittent search strategy.

Bug fixes.