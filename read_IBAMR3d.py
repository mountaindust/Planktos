#! /usr/bin/env python2
'''
Read in 3D samrai data generated by IBAMR using VisIt, store as VTK data.

VisIt must be installed.
Additionally, on Windows, please verify that frontend.py in 
<VisIt directory>/lib/site-packages/visit contains the lines:
    pcmd = vcmd.strip().split(' ')
	pcmd.append("-env")
INSTEAD of 
    pcmd = [vcmd, "-env"]
around line 250.

Created on Tues April 11 2017

Author: Christopher Strickland
Email: cstric12@utk.edu
'''

import sys, os
import argparse
############# Edit with proper VisIt path!!! #############
sys.path.append("C:/Program Files/LLNL/VisIt 2.11.0/lib/site-packages")
#############
from visit import *

parser = argparse.ArgumentParser()
parser.add_argument('path_to_dumps', help="Path to dumps.visit")
parser.add_argument('-o', '--outname', help="Directory to write to within vtk3d directory")
parser.add_argument('-x', '--xsamples', help="Number of X samples", type=int)
parser.add_argument('-y', '--ysamples', help="Number of Y samples", type=int)
parser.add_argument('-z', '--zsamples', help="Number of Z samples", type=int)
parser.add_argument('-s', '--start', help="Starting time-state (as int base-0 counter)",
                    type=int)
parser.add_argument('-e', '--end', help="Ending time-state (as int base-0 counter)",
                    type=int)


def main(path_to_dumps, Xsamples=11, Ysamples=11, Zsamples=11,
         out_name=None, state_start=None, state_end=None):
    ''' Function for creating vtk files out of samrai in VisIt

    Arguments:
    path_to_dumps: path to dumps.visit as a string.
        IMPORTANT!!! Use forward slashes only (even on Windows)!!
    Xsamples: number of samples in X direction (linspace style,
        both boundaries included)
    Ysamples: number of samples in Y direction
    Zsamples: number of samples in Z direction
    out_name: name of file in which to store vtk data. If unspecified,
        it will be inferred from path_to_dumps
    state_start: time state to start in. these count up the number of
        saved dump files from base 0. If None, 1 will be inferred (since
        0 usually doesn't have any data) unless state_end is also None,
        in which case only the last time state will be converted.
    state_end: last time state to convert. If None, the end state will
        be used.
    '''

    if path_to_dumps[-11:] != 'dumps.visit':
        path_to_dumps = os.path.join(path_to_dumps,'dumps.visit')
    assert os.path.isfile(path_to_dumps), "Could not find {}".format(path_to_dumps)

    if out_name is None:
        #use the simulation name
        out_name = os.path.split(os.path.split(path_to_dumps)[0])[1]

    # Create write directory
    out_path = os.path.join('vtk3d',out_name)
    if not os.path.isdir(out_path):
        os.makedirs(out_path)

    ##### Spin up VisIt and parse states to gather #####
    LaunchNowin()
    OpenDatabase("localhost:"+path_to_dumps, 0) #opens data to first time step
    if state_start is None and state_end is None:
        state_start = state_end = TimeSliderGetNStates() - 1
    elif state_start is None:
        state_start = 1
    elif state_end is None:
        state_end = TimeSliderGetNStates() - 1
    SetTimeSliderState(state_start)
    AddPlot("Vector", "U")
    DrawPlots()

    ##### Add resample operator and redraw vectors #####
    AddOperator("Resample", 0) # the 0 here means "apply operator only to this plot"
    SetActivePlots(1) # there are two plots now, since levels is auto added
    ResampleAtts = ResampleAttributes()
    ResampleAtts.useExtents = 1
    ResampleAtts.SetSamplesX(Xsamples)
    ResampleAtts.SetSamplesY(Ysamples)
    ResampleAtts.is3D = 1
    ResampleAtts.SetSamplesZ(Zsamples)
    ResampleAtts.tieResolver = ResampleAtts.random  # random, largest, smallest
    ResampleAtts.tieResolverVariable = "default"
    ResampleAtts.defaultValue = 0
    ResampleAtts.distributedResample = 1
    ResampleAtts.cellCenteredOutput = 0
    SetOperatorOptions(ResampleAtts, 0)
    VectorAtts = VectorAttributes()
    VectorAtts.nVectors = Xsamples*Ysamples*Zsamples
    SetPlotOptions(VectorAtts)
    DrawPlots()

    ##### Save at each time state requested as a VECTOR vtk #####
    n = state_start
    while n < state_end+1:
        if 100 > n > 9:
            nstr = '0{}'.format(n)
        elif n < 10:
            nstr = '00{}'.format(n)
        else:
            nstr = str(n)
        ExportDBAtts = ExportDBAttributes()
        ExportDBAtts.db_type = "VTK"
        ExportDBAtts.filename = "IBAMR_db_"+nstr
        ExportDBAtts.dirname = out_path
        ExportDBAtts.variables = ("U")
        ExportDBAtts.opts.types = ()
        ExportDatabase(ExportDBAtts)
        if n < state_end:
            TimeSliderNextState()
        n+=1
    print("Data saved to {}.".format(out_path))
    DeleteAllPlots()
    CloseDatabase("localhost:"+path_to_dumps)



if __name__ == "__main__":
    args = parser.parse_args()
    if args.xsamples is None:
        args.xsamples = 11
    if args.ysamples is None:
        args.ysamples = 11
    if args.zsamples is None:
        args.zsamples = 11
    main(args.path_to_dumps, args.xsamples, args.ysamples, args.zsamples,
         args.outname, args.start, args.end)
